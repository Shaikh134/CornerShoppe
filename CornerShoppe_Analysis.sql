-- List all unique cities where customers are located.
select distinct(customer_city) from  customers ;

-- Count the number of orders placed in 2017.
select count(order_id) as total_order from orders
where order_purchase_timestamp =2017;

-- Find the total sales per category.
select products.product_category, sum(payments.payment_value)as sales 
from order_items join products
on order_items.product_id = products.product_id
group by products.product_category;

-- Calculate the percentage of orders that were paid in installments.
select (sum(case when payment_installments >=1 then 1 else 0 end ))/count(*) *100 as paid_installment 
from payments;

-- Count the number of customers from each state.
select customer_state , count(customer_id)as total_customers  from customers
group by customer_state;

-- Find the average number of products per order, grouped by customer city.
with count_per_order as (select orders.order_id, orders.customer_id,count(order_items.order_id) as order_count
from orders join order_items
on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id) 
select customers.customer_city ,round( avg(count_per_order.order_count),2) as avg_orders
from customers join count_per_order
on customers.customer_id= count_per_order.customer_id
group by customers.customer_city;

-- Calculate the percentage of total revenue contributed by each product category.
select  upper(products.product_category) , 
round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) as sales 
from order_items join products
on order_items.product_id = products.product_id
join payments
on order_items.order_id= payments.order_id
group by products.product_category;

-- Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category,count(order_items.product_id)as total_count_of_product,
round(avg(order_items.price),2) as avg_price 
from products join order_items
on products.product_id =order_items.product_id
group by products.product_category;

-- Calculate the total revenue generated by each seller, and rank them by revenue.
select *, dense_rank() over(order by revenue desc)as rn from 
(select order_items.seller_id, round(sum(payments.payment_value),2) as revenue 
from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a ;

-- Calculate the number of orders per month in 2018.
select month(order_purchase_timestamp ) as month, count(order_id) from orders
where year(order_purchase_timestamp)= 2018
group by month;

-- Calculate the moving average of order values for each customer over their order history.
select customer_id,order_purchase_timestamp ,payment ,
avg (payment) 
over(partition by customer_id order by order_purchase_timestamp 
rows between 2 preceding and current row) as mov_avg 
from 
(select orders.customer_id , orders.order_purchase_timestamp,
payments.payment_value as payment
from orders join payments
on orders.order_id = payments.order_id) as x ;

-- Calculate the cumulative sales per month for each year.
select years, months ,payment, sum(payment)
over(order by years, months ) cumulative from 
(select year(orders.order_purchase_timestamp) as years , 
month(orders.order_purchase_timestamp)as months,
round(sum(payments.payment_value),2)  as payment
from orders join payments
on orders.order_id = payments.order_id
group by years, months order by years , months) as x;

-- Calculate the year-over-year growth rate of total sales.
with a as (select year(orders.order_purchase_timestamp) as years ,
round(sum(payments.payment_value),2)  as payment
from orders join payments
on orders.order_id = payments.order_id
group by years  order by years)
select years , 
round(((payment - lag(payment -1) over (order by years ))/lag(payment -1) over (order by years )) *100,2) as Year_over_year_growth
from a;

-- Identify the top 3 customers who spent the most money in each year.
select years, customer_id, payment, D_Rank
from 
(select year(orders.order_purchase_timestamp) as years , 
orders.customer_id,
sum(payments.payment_value) as payment ,
dense_rank() over(partition by year(orders.order_purchase_timestamp) 
order by sum(payments.payment_value) desc) as D_Rank
from orders join payments
on orders.order_id = payments.order_id
group by year(orders.order_purchase_timestamp),orders.customer_id) as a
where D_Rank <= 3 ;

